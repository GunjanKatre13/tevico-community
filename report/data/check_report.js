var check_reports = [{"check_metadata": {"categories": ["encryption"], "check_aliases": [], "check_id": "ec2_ebs_volume_encryption", "check_title": "Ensure there are no EBS Volumes unencrypted.", "check_type": ["Data Protection"], "depends_on": [], "description": "Ensure there are no EBS Volumes unencrypted.", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": null, "native_iac": null, "other": null, "terraform": null}, "recommendation": {"text": "Encrypt all EBS volumes and Enable Encryption by default You can configure your AWS account to enforce the encryption of the new EBS volumes and snapshot copies that you create. For example, Amazon EBS encrypts the EBS volumes created when you launch an instance and the snapshots that you copy from an unencrypted snapshot.", "url": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"}}, "resource_id_template": "arn:partition:cloudformation:region:account-id:stack/resource-id", "resource_type": "AwsEc2Volume", "risk": "Data encryption at rest prevents data visibility in the event of its unauthorized access or theft.", "service_name": "ec2", "severity": "medium", "sub_service_name": "volume", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_ebs_volume_encryption", "passed": true, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": ["encryption"], "check_aliases": [], "check_id": "ec2_ebs_default_encryption", "check_title": "Check if EBS Default Encryption is activated.", "check_type": ["Data Protection"], "depends_on": [], "description": "Check if EBS Default Encryption is activated.", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "aws ec2 enable-ebs-encryption-by-default", "native_iac": "", "other": "https://docs.prowler.com/checks/aws/general-policies/ensure-ebs-default-encryption-is-enabled#aws-console", "terraform": "https://docs.prowler.com/checks/aws/general-policies/ensure-ebs-default-encryption-is-enabled#terraform"}, "recommendation": {"text": "Enable Encryption. Use a CMK where possible. It will provide additional management and privacy benefits.", "url": "https://aws.amazon.com/premiumsupport/knowledge-center/ebs-automatic-encryption/"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "Other", "risk": "If not enabled sensitive information at rest is not protected.", "service_name": "ec2", "severity": "medium", "sub_service_name": "ebs", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_ebs_default_encryption", "passed": false, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": ["encryption"], "check_aliases": [], "check_id": "ec2_ebs_snapshot_encrypted", "check_title": "Check if EBS snapshots are encrypted.", "check_type": ["Data Protection"], "depends_on": [], "description": "Check if EBS snapshots are encrypted.", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "aws ec2 --region \u003cREGION\u003e enable-ebs-encryption-by-default", "native_iac": "https://docs.prowler.com/checks/aws/general-policies/general_3-encrypt-ebs-volume#cloudformation", "other": "https://docs.prowler.com/checks/aws/general-policies/general_3-encrypt-ebs-volume#aws-console", "terraform": "https://docs.prowler.com/checks/aws/general-policies/general_3-encrypt-ebs-volume#terraform"}, "recommendation": {"text": "Encrypt all EBS Snapshot and Enable Encryption by default. You can configure your AWS account to enforce the encryption of the new EBS volumes and snapshot copies that you create. For example, Amazon EBS encrypts the EBS volumes created when you launch an instance and the snapshots that you copy from an unencrypted snapshot.", "url": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "Other", "risk": "Data encryption at rest prevents data visibility in the event of its unauthorized access or theft.", "service_name": "ec2", "severity": "medium", "sub_service_name": "snapshot", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_ebs_snapshot_encrypted", "passed": true, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": ["Infrastructure Protection"], "check_aliases": [], "check_id": "ec2_instance_managed_by_ssm", "check_title": "Check if EC2 instances are managed by Systems Manager.", "check_type": ["Infrastructure Security"], "depends_on": [], "description": "Check if EC2 instances are managed by Systems Manager.", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "", "native_iac": "", "other": "https://www.trendmicro.com/cloudoneconformity/knowledge-base/aws/SSM/ssm-managed-instances.html", "terraform": ""}, "recommendation": {"text": "Verify and apply Systems Manager Prerequisites", "url": "https://docs.aws.amazon.com/systems-manager/latest/userguide/managed_instances.html"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsEc2Instance", "risk": "AWS Config provides AWS Managed Rules, which are predefined, customizable rules that AWS Config uses to evaluate whether your AWS resource configurations comply with common best practices.", "service_name": "ec2", "severity": "medium", "sub_service_name": "instance", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_instance_managed_by_ssm", "passed": false, "report_metadata": null, "resource_ids_status": {"No Instances": false}, "section": "Security"}, {"check_metadata": {"categories": ["secrets"], "check_aliases": [], "check_id": "ec2_instance_secrets_user_data", "check_title": "Find secrets in EC2 User Data.", "check_type": ["IAM"], "depends_on": [], "description": "Find secrets in EC2 User Data.", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "https://docs.prowler.com/checks/aws/secrets-policies/bc_aws_secrets_1#cli-command", "native_iac": "https://docs.prowler.com/checks/aws/secrets-policies/bc_aws_secrets_1#cloudformation", "other": "", "terraform": "https://docs.prowler.com/checks/aws/secrets-policies/bc_aws_secrets_1#terraform"}, "recommendation": {"text": "Implement automated detective control (e.g. using tools like Prowler) to scan accounts for passwords and secrets. Use secrets manager service to store and retrieve passwords and secrets.", "url": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html"}}, "resource_id_template": "arn:partition:access-analyzer:region:account-id:analyzer/resource-id", "resource_type": "AwsEc2Instance", "risk": "Secrets hardcoded into instance user data can be used by malware and bad actors to gain lateral access to other services.", "service_name": "ec2", "severity": "critical", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_instance_secrets_user_data", "passed": false, "report_metadata": null, "resource_ids_status": {"No Instances": false}, "section": "Security"}, {"check_metadata": {"categories": ["secrets"], "check_aliases": [], "check_id": "ec2_launch_template_no_secrets", "check_title": "Find secrets in EC2 Launch Template", "check_type": [], "depends_on": [], "description": "Find secrets in EC2 Launch Template", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Do not include sensitive information in user data within the launch templates, try to use Secrets Manager instead.", "url": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html"}}, "resource_id_template": "arn:partition:ec2:region:account-id:launch-template/template-id", "resource_type": "AwsEc2LaunchTemplate", "risk": "The use of a hard-coded password increases the possibility of password guessing. If hard-coded passwords are used, it is possible that malicious users gain access through the account in question.", "service_name": "ec2", "severity": "critical", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_launch_template_no_secrets", "passed": false, "report_metadata": null, "resource_ids_status": {"No Launch Templates": false}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "ec2_instance_profile_attached", "check_title": "Ensure IAM instance roles are used for AWS resource access from instances", "check_type": ["Software and Configuration Checks/Industry and Regulatory Standards/CIS AWS Foundations Benchmark"], "depends_on": [], "description": "Ensure IAM instance roles are used for AWS resource access from instances.", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "", "native_iac": "", "other": "https://github.com/cloudmatos/matos/tree/master/remediations/aws/ec2/attach_iam_roles_ec2_instances", "terraform": ""}, "recommendation": {"text": "Create an IAM instance role if necessary and attach it to the corresponding EC2 instance.", "url": "http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsEc2Instance", "risk": "AWS access from within AWS instances can be done by either encoding AWS keys into AWS API calls or by assigning the instance to a role which has an appropriate permissions policy for the required access. AWS IAM roles reduce the risks associated with sharing and rotating credentials that can be used outside of AWS itself. If credentials are compromised, they can be used from outside of the AWS account.", "service_name": "ec2", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_instance_profile_attached", "passed": false, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "ec2_imdsv2_enabled", "check_title": "Check if EC2 Instance Metadata Service Version 2 (IMDSv2) is Enabled and Required.", "check_type": ["Infrastructure Security"], "depends_on": [], "description": "Check if EC2 Instance Metadata Service Version 2 (IMDSv2) is Enabled and Required.", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "aws ec2 modify-instance-metadata-options --instance-id \u003cinstance-id\u003e --http-tokens required --http-endpoint enabled", "native_iac": "https://docs.prowler.com/checks/aws/general-policies/bc_aws_general_31#cloudformation", "other": "https://www.trendmicro.com/cloudoneconformity/knowledge-base/aws/EC2/require-imds-v2.html", "terraform": "https://docs.prowler.com/checks/aws/general-policies/bc_aws_general_31#terraform"}, "recommendation": {"text": "If you don\u0027t need IMDS you can turn it off. Using aws-cli you can force the instance to use only IMDSv2.", "url": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html#configuring-instance-metadata-options"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsEc2Instance", "risk": "Using IMDSv2 will protect from misconfiguration and SSRF vulnerabilities. IMDSv1 will not.", "service_name": "ec2", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_imdsv2_enabled", "passed": false, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "cloudformation_stacks_termination_protection_enabled", "check_title": "Enable termination protection for Cloudformation Stacks", "check_type": [], "depends_on": [], "description": "Enable termination protection for Cloudformation Stacks", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html", "remediation": {"code": {"cli": "aws cloudformation update-termination-protection --region \u003cREGION_NAME\u003e --stack-name \u003cSTACK_NAME\u003e --enable-termination-protection", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Ensure termination protection is enabled for the cloudformation stacks.", "url": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html"}}, "resource_id_template": "arn:partition:cloudformation:region:account-id:stack/resource-id", "resource_type": "AwsCloudFormationStack", "risk": "Without termination protection enabled, a critical cloudformation stack can be accidently deleted.", "service_name": "cloudformation", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.cloudformation.cloudformation_stacks_termination_protection_enabled", "passed": false, "report_metadata": null, "resource_ids_status": {"arn:aws:cloudformation:ap-south-1:557505809693:stack/DeployLambda2/74dea290-7900-11ea-8c45-0aac1af93896": false, "arn:aws:cloudformation:ap-south-1:557505809693:stack/TevicoStackExp/a18362a0-3889-11ec-8737-0290d835550c": false}, "section": "Reliability"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "dynamodb_tables_pitr_enabled", "check_title": "Check if DynamoDB tables point-in-time recovery (PITR) is enabled.", "check_type": ["Software and Configuration Checks/Industry and Regulatory Standards/CIS AWS Foundations Benchmark"], "depends_on": [], "description": "Check if DynamoDB tables point-in-time recovery (PITR) is enabled.", "failure_message": null, "notes": "Data Protection", "provider": "aws", "related_to": [], "related_url": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery_Howitworks.html", "remediation": {"code": {"cli": "aws dynamodb update-continuous-backups --table-name \u003ctable_name\u003e --point-in-time-recovery-specification PointInTimeRecoveryEnabled=true", "native_iac": "https://docs.prowler.com/checks/aws/general-policies/general_6#cloudformation--serverless", "other": "", "terraform": "https://docs.prowler.com/checks/aws/general-policies/general_6#terraform"}, "recommendation": {"text": "Enable point-in-time recovery, this is not enabled by default.", "url": "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery_Howitworks.html"}}, "resource_id_template": "arn:partition:dynamodb:region:account-id:table/resource-id", "resource_type": "AwsDynamoDBTable", "risk": "If the DynamoDB Table does not have point-in-time recovery enabled, it is vulnerable to accidental write or delete operations.", "service_name": "dynamodb", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.dynamodb.dynamodb_tables_pitr_enabled", "passed": true, "report_metadata": null, "resource_ids_status": {}, "section": "Reliability"}, {"check_metadata": {"categories": ["forensics-ready"], "check_aliases": [], "check_id": "elb_logging_enabled", "check_title": "Check if Elastic Load Balancers have logging enabled.", "check_type": ["Logging and Monitoring"], "depends_on": [], "description": "Check if Elastic Load Balancers have logging enabled.", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "aws elb modify-load-balancer-attributes --load-balancer-name \u003clb_name\u003e --load-balancer-attributes \u0027{AccessLog:{Enabled:true,EmitInterval:60,S3BucketName:\u003cbucket_name\u003e}}\u0027", "native_iac": "https://docs.prowler.com/checks/aws/logging-policies/bc_aws_logging_23#cloudformation", "other": "https://www.trendmicro.com/cloudoneconformity/knowledge-base/aws/ELB/elb-access-log.html", "terraform": "https://docs.prowler.com/checks/aws/logging-policies/bc_aws_logging_23#terraform"}, "recommendation": {"text": "Enable ELB logging, create a log lifecycle and define use cases.", "url": "https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsElbLoadBalancer", "risk": "If logs are not enabled monitoring of service use and threat analysis is not possible.", "service_name": "elb", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.elb.elb_logging_enabled", "passed": true, "report_metadata": null, "resource_ids_status": {}, "section": "Reliability"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_avoid_root_usage", "check_title": "Ensure Root Account Usage is Avoided", "check_type": [], "depends_on": [], "description": "Ensure that the root account is not used for everyday tasks. The root user has unrestricted access to all resources in the AWS account, and its usage should be avoided for security reasons. MFA should be enabled to secure the root account, adding an extra layer of protection to prevent unauthorized access.", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Using IAM console navigate to Dashboard and expand Activate MFA on your user\u0027s account.", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_mfa"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsIamUser", "risk": "The root account has the highest level of privileges in an AWS account. If compromised, it could lead to complete control of the AWS environment, causing severe damage or data breaches. By avoiding the use of the root account for everyday tasks and enabling MFA, the risk of unauthorized access is significantly reduced. Additionally, enabling MFA for the root account ensures that even if the root credentials are compromised, an attacker would still need access to the MFA device.", "service_name": "iam", "severity": "critical", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_avoid_root_usage", "passed": true, "report_metadata": null, "resource_ids_status": {"RootAccount": false}, "section": "Reliability"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_policy_allows_privilege_escalation", "check_title": "Ensure No IAM Policies Allow Privilege Escalation", "check_type": [], "depends_on": [], "description": "Ensure no IAM policies within the account allow privilege escalation. Privilege escalation occurs when a user can gain access to resources or perform actions beyond their intended permissions, which poses a significant security risk.", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Using IAM console navigate to Dashboard and expand Activate MFA on your user\u0027s account.", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_mfa"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsIamUser", "risk": "Allowing privilege escalation through IAM policies can lead to unauthorized users obtaining higher-level privileges or full administrative access. This can result in data breaches, unauthorized resource usage, or complete control over the AWS environment. Restricting privilege escalation ensures the principle of least privilege is enforced, minimizing security vulnerabilities and potential misuse.", "service_name": "iam", "severity": "critical", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_policy_allows_privilege_escalation", "passed": false, "report_metadata": null, "resource_ids_status": {}, "section": "Reliability"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_policy_attached_to_only_group_or_roles", "check_title": "Ensure IAM Policies Are Only Attached to Groups or Roles", "check_type": [], "depends_on": [], "description": "Ensure IAM policies are only attached to groups or roles, and not directly to individual users. This helps to simplify the management of permissions and maintain better security practices by applying policies through roles and groups rather than individual users.", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Using IAM console navigate to Dashboard and expand Activate MFA on your user\u0027s account.", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_mfa"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsIamUser", "risk": "Attaching policies directly to users increases the complexity of managing permissions and the risk of accidentally assigning excessive permissions. It bypasses the principle of least privilege and makes it difficult to audit and manage access control effectively. Policies should be attached to groups or roles, which can then be assigned to users, ensuring more controlled and scalable permission management across the AWS environment.", "service_name": "iam", "severity": "critical", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_policy_attached_to_only_group_or_roles", "passed": false, "report_metadata": null, "resource_ids_status": {"aniket.ashtekar@comprinno.net": true, "cur-test-user": true}, "section": "Reliability"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_rotate_access_keys_90_days", "check_title": "Ensure IAM Access Keys Are Rotated Every 90 Days", "check_type": [], "depends_on": [], "description": "Ensure that IAM access keys are rotated every 90 days. Regular key rotation reduces the potential risk of compromised access keys by limiting the time window in which a key can be exploited.", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Using IAM console navigate to Dashboard and expand Activate MFA on your user\u0027s account.", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_mfa"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsIamUser", "risk": "If access keys are not rotated regularly, they can become vulnerable to unauthorized use, especially if exposed or compromised. Stale access keys increase the likelihood of security breaches, as long-standing keys could potentially fall into malicious hands. Regular rotation of access keys ensures a more secure environment by reducing the risk of long-term exposure.", "service_name": "iam", "severity": "critical", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_rotate_access_keys_90_days", "passed": false, "report_metadata": null, "resource_ids_status": {"aniket.ashtekar@comprinno.net": true, "cur-test-user": true}, "section": "Reliability"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_support_role_created", "check_title": "Ensure a support role is created within the AWS account. The support role is essential for enabling AWS support to assist with issues that require specific access, such as troubleshooting or resolving service disruptions.", "check_type": [], "depends_on": [], "description": "Ensure MFA is enabled for the user\u0027s account", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Using IAM console navigate to Dashboard and expand Activate MFA on your user\u0027s account.", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_mfa"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsIamUser", "risk": "If a support role is not created, AWS support may not be able to efficiently access or assist with issues within your account. This can delay the resolution of critical incidents, leading to prolonged outages or misconfigurations. Having a dedicated support role ensures that AWS support can quickly intervene when necessary, providing the right level of access without compromising security.", "service_name": "iam", "severity": "critical", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_support_role_created", "passed": true, "report_metadata": null, "resource_ids_status": {"AWSReservedSSO_global-billing-support_fd81779b185c6f10": true, "AWSServiceRoleForSupport": true}, "section": "Reliability"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_user_mfa_enabled_console_access", "check_title": "Ensure MFA is enabled for the user\u0027s account", "check_type": [], "depends_on": [], "description": "Ensure MFA (Multi-Factor Authentication) is enabled for all IAM users with console access. Enabling MFA provides an additional layer of security beyond just username and password, making it harder for unauthorized users to gain access.", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Using IAM console navigate to Dashboard and expand Activate MFA on your user\u0027s account.", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_mfa"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsIamUser", "risk": "Without MFA enabled, accounts with console access are more vulnerable to unauthorized access. MFA ensures that even if a password is compromised, an attacker would still need a second authentication factor (such as an MFA device) to gain access. Failure to enable MFA increases the risk of unauthorized access, potentially leading to data breaches or privilege misuse. Additionally, using a non-personal MFA device reduces risks associated with device loss or employee turnover.", "service_name": "iam", "severity": "critical", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_user_mfa_enabled_console_access", "passed": false, "report_metadata": null, "resource_ids_status": {"aniket.ashtekar@comprinno.net": false, "cur-test-user": false}, "section": "Reliability"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_user_multiple_active_access_keys", "check_title": "Ensure Multiple active access key for the users", "check_type": [], "depends_on": [], "description": "Ensure no IAM user has multiple active access keys. AWS recommends having only one active access key per user to reduce the potential attack surface. Multiple active access keys can increase the risk of unauthorized access or compromise, as it becomes harder to manage and track which keys are being used.", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Using IAM console navigate to Dashboard and expand Activate MFA on your user\u0027s account.", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_mfa"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsIamUser", "risk": "Having multiple active access keys can lead to security risks, such as difficulty in key rotation and potential unauthorized access. If one key gets compromised, an attacker could gain access to the user\u0027s account without the organization\u0027s knowledge. It also makes it harder to monitor and audit key usage. To mitigate these risks, limit the number of active access keys to one per user and regularly rotate them.", "service_name": "iam", "severity": "critical", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_user_multiple_active_access_keys", "passed": true, "report_metadata": null, "resource_ids_status": {"aniket.ashtekar@comprinno.net": false, "cur-test-user": false}, "section": "Reliability"}, {"check_metadata": {"categories": ["forensics-ready"], "check_aliases": [], "check_id": "opensearch_service_domains_audit_logging_enabled", "check_title": "Check if Amazon Elasticsearch/Opensearch Service domains have audit logging enabled", "check_type": ["Identify", "Logging"], "depends_on": [], "description": "Check if Amazon Elasticsearch/Opensearch Service domains have audit logging enabled", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Make sure you are logging information about Amazon Elasticsearch Service operations.", "url": "https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/audit-logs.html"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsOpenSearchDomain", "risk": "If logs are not enabled, monitoring of service use and threat analysis is not possible.", "service_name": "opensearch", "severity": "low", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.opensearch.opensearch_service_domains_audit_logging_enabled", "passed": true, "report_metadata": null, "resource_ids_status": {}, "section": "Reliability"}, {"check_metadata": {"categories": ["forensics-ready"], "check_aliases": [], "check_id": "opensearch_service_domains_cloudwatch_logging_enabled", "check_title": "Check if Amazon Elasticsearch/Opensearch Service domains have logging enabled", "check_type": ["Identify", "Logging"], "depends_on": [], "description": "Check if Amazon Elasticsearch/Opensearch Service domains have logging enabled", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "https://docs.prowler.com/checks/aws/elasticsearch-policies/elasticsearch_7#cli-command", "native_iac": "https://docs.prowler.com/checks/aws/elasticsearch-policies/elasticsearch_7#cloudformation", "other": "https://docs.prowler.com/checks/aws/elasticsearch-policies/elasticsearch_7#fix---runtime", "terraform": "https://docs.prowler.com/checks/aws/elasticsearch-policies/elasticsearch_7#fix---buildtime"}, "recommendation": {"text": "Enable Elasticsearch/Opensearch log. Create use cases for them. Using audit logs check for access denied events.", "url": "https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createdomain-configure-slow-logs.html"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsOpenSearchDomain", "risk": "Amazon ES exposes four Elasticsearch/Opensearch logs through Amazon CloudWatch Logs: error logs, search slow logs, index slow logs, and audit logs.", "service_name": "opensearch", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.opensearch.opensearch_service_domains_cloudwatch_logging_enabled", "passed": true, "report_metadata": null, "resource_ids_status": {}, "section": "Reliability"}, {"check_metadata": {"categories": ["Infrastructure Protection"], "check_aliases": [], "check_id": "ec2_image_builder_enabled", "check_title": "Check if EC2 Image Builder is enabled in the AWS account", "check_type": [], "depends_on": [], "description": "Check if EC2 Image Builder is enabled by verifying if there are any active image pipelines configured in the account.", "failure_message": null, "notes": null, "provider": "aws", "related_to": [], "related_url": "https://docs.aws.amazon.com/imagebuilder/latest/userguide/set-up-ib-env.html", "remediation": {"code": {"cli": "aws imagebuilder create-image-pipeline --cli-input-json \u003cfile\u003e", "native_iac": "", "other": "https://docs.aws.amazon.com/imagebuilder/latest/userguide/manage-pipelines.html", "terraform": ""}, "recommendation": {"text": "Ensure EC2 Image Builder is enabled by creating and managing image pipelines to automate image creation and updates.", "url": "https://docs.aws.amazon.com/imagebuilder/latest/userguide/manage-pipelines.html"}}, "resource_id_template": "arn:partition:service:region:account-id:image-builder-pipeline/resource-id", "resource_type": "AwsEc2ImageBuilderPipeline", "risk": "Not enabling EC2 Image Builder may result in inconsistent or insecure virtual machine images, as no image-building automation is in place.", "service_name": "ec2", "severity": "medium", "sub_service_name": "imagebuilder", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_image_builder_enabled", "passed": true, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": ["Infrastructure Protection"], "check_aliases": [], "check_id": "ec2_instance_managed_by_ssm", "check_title": "Check if EC2 instances are managed by Systems Manager.", "check_type": ["Infrastructure Security"], "depends_on": [], "description": "Check if EC2 instances are managed by Systems Manager.", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "", "native_iac": "", "other": "https://www.trendmicro.com/cloudoneconformity/knowledge-base/aws/SSM/ssm-managed-instances.html", "terraform": ""}, "recommendation": {"text": "Verify and apply Systems Manager Prerequisites", "url": "https://docs.aws.amazon.com/systems-manager/latest/userguide/managed_instances.html"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsEc2Instance", "risk": "AWS Config provides AWS Managed Rules, which are predefined, customizable rules that AWS Config uses to evaluate whether your AWS resource configurations comply with common best practices.", "service_name": "ec2", "severity": "medium", "sub_service_name": "instance", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_instance_managed_by_ssm", "passed": false, "report_metadata": null, "resource_ids_status": {"No Instances": false}, "section": "Security"}, {"check_metadata": {"categories": ["Infrastructure Protection"], "check_aliases": [], "check_id": "ec2_managed_instance_patch_compliance_status", "check_title": "Ensure EC2 managed instances are compliant with patch management", "check_type": [], "depends_on": [], "description": "Ensure EC2 managed instances are compliant with patch management", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Ensure that all managed instances are patched and compliant according to the defined patch baseline.", "url": "https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-compliance-fix.html"}}, "resource_id_template": "arn:partition:cloudformation:region:account-id:stack/resource-id", "resource_type": "AwsEc2ManagedInstance", "risk": "Instances that are not compliant with patch management may be vulnerable to security risks and can expose the system to potential threats. Ensuring patch compliance is critical for maintaining the security and stability of your infrastructure.", "service_name": "ec2", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_managed_instance_patch_compliance_status", "passed": true, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": ["Infrastructure Protection"], "check_aliases": [], "check_id": "ec2_microsoft_sql_server_end_of_support", "check_title": "Check if any EC2 instance is using AMI with Microsoft SQL Server that has reached end of support", "check_type": [], "depends_on": [], "description": "Check if any EC2 instance is using AMI with Microsoft SQL Server that has reached end of support", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Migrate EC2 instances running unsupported SQL Server versions to supported versions like SQL Server 2019 or later. Consider using AWS License Manager or System Manager for identifying and managing SQL Server versions on EC2", "url": "https://aws.amazon.com/rds/sqlserver/"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsEc2Instance", "risk": "Running EC2 instances with unsupported SQL Server versions can lead to security vulnerabilities, non-compliance with best practices, and lack of vendor support in case of issues. This could result in potential data breaches or disruptions in service", "service_name": "ec2", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_microsoft_sql_server_end_of_support", "passed": true, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": ["Infrastructure Protection"], "check_aliases": [], "check_id": "ec2_network_acl_allow_ingress_any_port", "check_title": "Ensure no Network ACLs allow ingress from 0.0.0.0/0 to any port", "check_type": [], "depends_on": [], "description": "Ensure no Network ACLs allow ingress from 0.0.0.0/0 to any port", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Apply Zero Trust approach. Implement a process to scan and remediate unrestricted or overly permissive network ACLs. Recommended best practices is to narrow the definition for the minimum ports required", "url": "https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsEc2NetworkAcl", "risk": "Even with a perimeter firewall in place, open network ACLs can allow any user or malware with VPC access to scan for well-known and sensitive ports, potentially gaining access to instances.", "service_name": "ec2", "severity": "medium", "sub_service_name": "networkacl", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_network_acl_allow_ingress_any_port", "passed": false, "report_metadata": null, "resource_ids_status": {"acl-09258d685b07f3afe": false, "acl-cdf2f8a5": false}, "section": "Security"}, {"check_metadata": {"categories": ["Infrastructure Protection"], "check_aliases": [], "check_id": "ec2_network_acl_allow_ingress_tcp_port_22", "check_title": "Ensure no Network ACLs allow ingress from 0.0.0.0/0 to SSH port 22", "check_type": [], "depends_on": [], "description": "Ensure no Network ACLs allow ingress from 0.0.0.0/0 to SSH port 22", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "", "native_iac": "https://docs.prowler.com/checks/aws/networking-policies/ensure-aws-nacl-does-not-allow-ingress-from-00000-to-port-22#cloudformation", "other": "", "terraform": "https://docs.prowler.com/checks/aws/networking-policies/ensure-aws-nacl-does-not-allow-ingress-from-00000-to-port-22#terraform"}, "recommendation": {"text": "Apply Zero Trust approach. Implement a process to scan and remediate unrestricted or overly permissive network ACLs. Recommended best practices is to narrow the definition for the minimum ports required", "url": "https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsEc2NetworkAcl", "risk": "Even with a perimeter firewall in place, open network ACLs can allow any user or malware with VPC access to scan for well-known and sensitive ports, potentially gaining access to instances.", "service_name": "ec2", "severity": "medium", "sub_service_name": "networkacl", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_network_acl_allow_ingress_tcp_port_22", "passed": false, "report_metadata": null, "resource_ids_status": {"acl-09258d685b07f3afe": false, "acl-cdf2f8a5": false}, "section": "Security"}, {"check_metadata": {"categories": ["Infrastructure Protection"], "check_aliases": [], "check_id": "ec2_security_group_default_restrict_traffic", "check_title": "Ensure the default security group of every VPC restricts all traffic.", "check_type": [], "depends_on": [], "description": "Ensure the default security group of every VPC restricts all traffic.", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "", "native_iac": "", "other": "https://docs.prowler.com/checks/aws/networking-policies/networking_4#aws-console", "terraform": "https://docs.prowler.com/checks/aws/networking-policies/networking_4#terraform"}, "recommendation": {"text": "Apply Zero Trust approach. Implement a process to scan and remediate unrestricted or overly permissive security groups. Recommended best practices is to narrow the definition for the minimum ports required.", "url": "https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsEc2SecurityGroup", "risk": "Even having a perimeter firewall, having security groups open allows any user or malware with vpc access to scan for well known and sensitive ports and gain access to instance.", "service_name": "ec2", "severity": "high", "sub_service_name": "securitygroup", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.ec2.ec2_security_group_default_restrict_traffic", "passed": true, "report_metadata": null, "resource_ids_status": {"sg-0f70651722c6a4b50": true, "sg-ac6ae2c1": true}, "section": "Security"}, {"check_metadata": {"categories": ["infrastructure_protection", "security"], "check_aliases": [], "check_id": "iam_account_maintain_current_contact_details", "check_title": "Verify AWS Account Contact Details", "check_type": ["contact_information_check"], "depends_on": [], "description": "Checks whether the AWS account has all required contact details updated.", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "# Use the AWS Management Console to update your contact details:\n# 1. Sign in to the AWS Management Console\n# 2. Go to the Billing \u0026 Cost Management Dashboard\n# 3. Select your AWS account name and then My Account\n# 4. Click Edit next to Contact Information\n# 5. Enter your updated contact information\n# 6. Click Update to save the changes\n", "native_iac": "# Ensure your infrastructure as code is updated with the correct account information.\n", "other": "# Verify that all relevant contacts are updated in your organization\u2019s internal systems as well.\n", "terraform": "# No specific Terraform commands; update account information via AWS Management Console.\n"}, "recommendation": {"text": "Enable automated backup for production data. Define a retention period and\nperiodically test backup restoration. A Disaster Recovery process should be\nin place to govern Data Protection approach.\n", "url": "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html"}}, "resource_id_template": "arn:aws:account::account-id:*", "resource_type": "AwsAccount", "risk": "Incomplete or outdated contact information may hinder communication during critical account issues or security incidents.", "service_name": "account", "severity": "medium", "sub_service_name": "contact_details", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_account_maintain_current_contact_details", "passed": false, "report_metadata": null, "resource_ids_status": {"address": true, "company_name": true, "full_name": true, "phone_number": true, "website_url": false}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_account_security_contact_information_registered", "check_title": "Check for Attached Administrator Policies", "check_type": [], "depends_on": [], "description": "Ensures that no IAM user or role has an Administrator policy attached.", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "aws iam detach-user-policy --user-name \u003cuser-name\u003e --policy-arn \u003cpolicy-arn\u003e", "native_iac": "", "other": "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html", "terraform": "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policies-attach"}, "recommendation": {"text": "Regularly audit IAM policies and remove any unnecessary Administrator permissions. Use IAM best practices to define least privilege access.", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html"}}, "resource_id_template": "arn:aws:iam::account-id:user/resource-id", "resource_type": "AwsIAMUser", "risk": "Attaching administrative privileges to users and roles increases the security risk.", "service_name": "iam", "severity": "high", "sub_service_name": "IAM User and Role Policies", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_account_security_contact_information_registered", "passed": true, "report_metadata": null, "resource_ids_status": {"SECURITY_CONTACT": true}, "section": "Security"}, {"check_metadata": {"categories": ["security", "least privilege"], "check_aliases": [], "check_id": "iam_attached_policy_admin_privileges_found", "check_title": "Ensure no IAM user or role has AdministratorAccess policy attached", "check_type": ["Software and Configuration Checks", "Security Best Practices"], "depends_on": [], "description": "This check ensures that no IAM user or role has an AdministratorAccess policy attached, as such policies grant excessive privileges and can pose security risks.", "failure_message": null, "notes": "It\u0027s a best practice to avoid granting full administrative privileges unless absolutely necessary.", "provider": "aws", "related_to": [], "related_url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html", "remediation": {"code": {"cli": "aws iam detach-user-policy --user-name \u003cuser_name\u003e --policy-arn arn:aws:iam::aws:policy/AdministratorAccess\n", "native_iac": "", "other": "https://www.trendmicro.com/cloudoneconformity/knowledge-base/aws/iam/iam-users-no-admin-access.html", "terraform": "https://docs.prowler.com/checks/aws/general-policies/ensure-that-iam-users-do-not-have-administrator-access"}, "recommendation": {"text": "Review IAM users and roles, and detach any AdministratorAccess policies. \nImplement the principle of least privilege by assigning only necessary permissions.\n", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html"}}, "resource_id_template": "arn:aws:iam::{account-id}:{resource-type}/{resource-name}", "resource_type": "AwsIamUser, AwsIamRole", "risk": "Attaching AdministratorAccess policy to IAM users or roles grants full administrative privileges, increasing the risk of unintentional or malicious changes to your AWS account.", "service_name": "iam", "severity": "high", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_attached_policy_admin_privileges_found", "passed": true, "report_metadata": null, "resource_ids_status": {"aniket.ashtekar@comprinno.net": true, "cur-test-user": true}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_customer_attached_policy_admin_privileges_found", "check_title": "Ensure IAM Users Do Not Have Administrator Access Policy Attached", "check_type": ["Software and Configuration Checks", "Industry and Regulatory Standards", "CIS AWS Foundations Benchmark"], "depends_on": [], "description": "Ensure that no IAM user has the AdministratorAccess policy attached.", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "aws iam detach-user-policy --user-name \u003cuser_name\u003e --policy-arn \u003cpolicy_arn\u003e", "native_iac": "", "other": "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html", "terraform": "https://docs.prowler.com/checks/aws/general-policies/ensure-that-rds-instances-have-backup-policy#terraform"}, "recommendation": {"text": "It is more secure to start with a minimum set of permissions and grant additional permissions as necessary, rather than starting with permissions that are too lenient and then trying to tighten them later. List policies and analyze if permissions are the least possible to conduct business activities.", "url": "http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsIamUser", "risk": "Attaching administrative privileges to users and roles increases the security risk.", "service_name": "iam", "severity": "high", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_customer_attached_policy_admin_privileges_found", "passed": true, "report_metadata": null, "resource_ids_status": {"aniket.ashtekar@comprinno.net": true, "cur-test-user": true}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_customer_unattached_policy_admin_privileges_found", "check_title": "Ensure IAM policies that allow full \"*:*\" administrative privileges are not created", "check_type": ["Software and Configuration Checks", "Industry and Regulatory Standards", "CIS AWS Foundations Benchmark"], "depends_on": [], "description": "Ensure IAM policies that allow full \"*:*\" administrative privileges are not created, may be eventual consistent if an ephemeral resource is using it.", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "aws iam list-policies --scope Local", "native_iac": "", "other": "https://www.trendmicro.com/cloudoneconformity/knowledge-base/aws/IAM/iam-unattached-policies.html", "terraform": "https://docs.prowler.com/checks/aws/iam-policies/iam_47#terraform"}, "recommendation": {"text": "It is more secure to start with a minimum set of permissions and grant additional permissions \nas necessary, rather than starting with permissions that are too lenient and then trying to tighten \nthem later. List policies and analyze if permissions are the least possible to conduct business activities.\n", "url": "http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsIamPolicy", "risk": "IAM policies are the means by which privileges are granted to users, groups, or roles. \nIt is recommended and considered standard security advice to grant least privilege\u2014that is, \ngranting only the permissions required to perform a task. Determine what users need to do \nand then craft policies for them that let the users perform only those tasks instead of \nallowing full administrative privileges. Providing full administrative privileges instead of \nrestricting to the minimum set of permissions exposes the resources to potentially unwanted actions.\n", "service_name": "iam", "severity": "high", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_customer_unattached_policy_admin_privileges_found", "passed": true, "report_metadata": {"findings": [{"resource_arn": "arn:aws:iam::557505809693:policy/tevico-client-policy", "resource_id": "tevico-client-policy", "resource_tags": {}, "status": "PASS", "status_extended": "Custom policy tevico-client-policy is unattached and does not allow \u0027*:*\u0027 administrative privileges."}, {"resource_arn": "arn:aws:iam::557505809693:policy/Update-cname-policy", "resource_id": "Update-cname-policy", "resource_tags": {}, "status": "PASS", "status_extended": "Custom policy Update-cname-policy is unattached and does not allow \u0027*:*\u0027 administrative privileges."}, {"resource_arn": "arn:aws:iam::557505809693:policy/deletemeRolePolicy", "resource_id": "deletemeRolePolicy", "resource_tags": {}, "status": "PASS", "status_extended": "Custom policy deletemeRolePolicy is unattached and does not allow \u0027*:*\u0027 administrative privileges."}, {"resource_arn": "arn:aws:iam::557505809693:policy/efi-sample-policy", "resource_id": "efi-sample-policy", "resource_tags": {}, "status": "PASS", "status_extended": "Custom policy efi-sample-policy is unattached and does not allow \u0027*:*\u0027 administrative privileges."}, {"resource_arn": "arn:aws:iam::557505809693:policy/TevicoStackExp-CFNSsmRolePolicy-A0YWF9KAQ0EA", "resource_id": "TevicoStackExp-CFNSsmRolePolicy-A0YWF9KAQ0EA", "resource_tags": {}, "status": "PASS", "status_extended": "Custom policy TevicoStackExp-CFNSsmRolePolicy-A0YWF9KAQ0EA is unattached and does not allow \u0027*:*\u0027 administrative privileges."}, {"resource_arn": "arn:aws:iam::557505809693:policy/sts-access", "resource_id": "sts-access", "resource_tags": {}, "status": "PASS", "status_extended": "Custom policy sts-access is unattached and does not allow \u0027*:*\u0027 administrative privileges."}, {"resource_arn": "arn:aws:iam::557505809693:policy/delete-,mantle-policy", "resource_id": "delete-,mantle-policy", "resource_tags": {}, "status": "PASS", "status_extended": "Custom policy delete-,mantle-policy is unattached and does not allow \u0027*:*\u0027 administrative privileges."}, {"resource_arn": "arn:aws:iam::557505809693:policy/service-acc-assume-role-policy", "resource_id": "service-acc-assume-role-policy", "resource_tags": {}, "status": "PASS", "status_extended": "Custom policy service-acc-assume-role-policy is unattached and does not allow \u0027*:*\u0027 administrative privileges."}, {"resource_arn": "arn:aws:iam::557505809693:policy/start_stop_policy", "resource_id": "start_stop_policy", "resource_tags": {}, "status": "PASS", "status_extended": "Custom policy start_stop_policy is unattached and does not allow \u0027*:*\u0027 administrative privileges."}, {"resource_arn": "arn:aws:iam::557505809693:policy/test-IAM-policy2", "resource_id": "test-IAM-policy2", "resource_tags": {}, "status": "PASS", "status_extended": "Custom policy test-IAM-policy2 is unattached and does not allow \u0027*:*\u0027 administrative privileges."}, {"resource_arn": "arn:aws:iam::557505809693:policy/s3crossregion", "resource_id": "s3crossregion", "resource_tags": {}, "status": "PASS", "status_extended": "Custom policy s3crossregion is unattached and does not allow \u0027*:*\u0027 administrative privileges."}, {"resource_arn": "arn:aws:iam::557505809693:policy/EC2StartPolicy", "resource_id": "EC2StartPolicy", "resource_tags": {}, "status": "PASS", "status_extended": "Custom policy EC2StartPolicy is unattached and does not allow \u0027*:*\u0027 administrative privileges."}, {"resource_arn": "arn:aws:iam::557505809693:policy/iam_delete_me", "resource_id": "iam_delete_me", "resource_tags": {}, "status": "PASS", "status_extended": "Custom policy iam_delete_me is unattached and does not allow \u0027*:*\u0027 administrative privileges."}, {"resource_arn": "arn:aws:iam::557505809693:policy/s3-plus-trail-policy", "resource_id": "s3-plus-trail-policy", "resource_tags": {}, "status": "PASS", "status_extended": "Custom policy s3-plus-trail-policy is unattached and does not allow \u0027*:*\u0027 administrative privileges."}]}, "resource_ids_status": {"EC2StartPolicy": true, "TevicoStackExp-CFNSsmRolePolicy-A0YWF9KAQ0EA": true, "Update-cname-policy": true, "delete-,mantle-policy": true, "deletemeRolePolicy": true, "efi-sample-policy": true, "iam_delete_me": true, "s3-plus-trail-policy": true, "s3crossregion": true, "service-acc-assume-role-policy": true, "start_stop_policy": true, "sts-access": true, "test-IAM-policy2": true, "tevico-client-policy": true}, "section": "Security"}, {"check_metadata": {"categories": ["security", "privilege_management"], "check_aliases": [], "check_id": "iam_inline_policy_admin_privileges_found", "check_title": "Ensure IAM inline policies with administrative privileges are not attached", "check_type": ["Software and Configuration Checks", "Security Checks"], "depends_on": [], "description": "Ensure IAM inline policies with full administrative privileges (`*:*`) are not attached to any IAM user.", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html", "remediation": {"code": {"cli": "https://docs.prowler.com/checks/aws/iam-policies/iam_47#cli-command", "native_iac": "", "other": "https://docs.prowler.com/checks/aws/iam-policies/iam_47#aws-console", "terraform": "https://docs.prowler.com/checks/aws/iam-policies/iam_47#terraform"}, "recommendation": {"text": "It is more secure to start with a minimum set of permissions and grant additional permissions as necessary, rather than starting with permissions that are too lenient and then trying to tighten them later. List policies an analyze if permissions are the least possible to conduct business activities.", "url": "http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html"}}, "resource_id_template": "arn:aws:iam::account-id:user/username", "resource_type": "AwsIamPolicy", "risk": "Attaching full administrative privileges to IAM users exposes the account to significant risk, as the user can perform unrestricted actions across all AWS services.", "service_name": "iam", "severity": "high", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_inline_policy_admin_privileges_found", "passed": true, "report_metadata": null, "resource_ids_status": {"aniket.ashtekar@comprinno.net": true, "cur-test-user": true}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_no_root_access_keys", "check_title": "Ensure no root account access key exists", "check_type": [], "depends_on": [], "description": "Ensure no root account access key exists", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Use the credential report to check the user and ensure the access_key_1_active and access_key_2_active fields are set to FALSE.", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_getting-report.html"}}, "resource_id_template": "arn:partition:iam:region:account-id:resource-id", "resource_type": "AwsIamAccessKey", "risk": "The root account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the root account be removed. Removing access keys associated with the root account limits vectors by which the account can be compromised. Removing the root access keys encourages the creation and use of role-based accounts that are least privileged.", "service_name": "iam", "severity": "critical", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_no_root_access_keys", "passed": false, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_password_policy_lowercase", "check_title": "Ensure IAM password policy require at least one lowercase letter", "check_type": [], "depends_on": [], "description": "Ensure IAM password policy requires at least one uppercase letter", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Ensure \"Requires at least one lowercase letter\" is checked under \"Password Policy\".", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html"}}, "resource_id_template": "arn:partition:iam:region:account-id:resource-id", "resource_type": "Other", "risk": "Password policies are used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one lowercase letter.", "service_name": "iam", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_password_policy_lowercase", "passed": true, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_password_policy_minimum_length_14", "check_title": "Ensure IAM password policy requires minimum length of 14 or greater", "check_type": [], "depends_on": [], "description": "Ensure IAM password policy requires minimum length of 14 or greater", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Ensure \"Minimum password length\" is checked under \"Password Policy\".", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html"}}, "resource_id_template": "arn:partition:iam:region:account-id:resource-id", "resource_type": "Other", "risk": "Password policies are used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require minimum length of 14 or greater.", "service_name": "iam", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_password_policy_minimum_length_14", "passed": false, "report_metadata": null, "resource_ids_status": {"IAM Password Policy": false}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_password_policy_number", "check_title": "Ensure IAM password policy require at least one number", "check_type": [], "depends_on": [], "description": "Ensure IAM password policy require at least one number", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Ensure \u0027Require at least one number\u0027 is checked under \u0027Password Policy\u0027.", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html"}}, "resource_id_template": "arn:partition:iam:region:account-id:resource-id", "resource_type": "Other", "risk": "Password policies are used to enforce password complexity requirements. IAM password policies can be used to ensure passwords are comprised of different character sets. It is recommended that the password policy require at least one number.", "service_name": "iam", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_password_policy_number", "passed": false, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_password_policy_reuse_24", "check_title": "Ensure IAM password policy prevents password reuse 24 or greater", "check_type": [], "depends_on": [], "description": "Ensure IAM password policy prevents password reuse 24 or greater", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Ensure \"Number of passwords to remember\" is set to 24.", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html"}}, "resource_id_template": "arn:partition:iam:region:account-id:resource-id", "resource_type": "Other", "risk": "Password policies are used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy prevents at least password reuse of 24 or greater.", "service_name": "iam", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_password_policy_reuse_24", "passed": false, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_password_policy_symbol", "check_title": "Ensure IAM password policy require at least one symbol", "check_type": [], "depends_on": [], "description": "Ensure IAM password policy require at least one symbol", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Ensure \"Require at least one non-alphanumeric character\" is checked under \"Password Policy.\"", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html"}}, "resource_id_template": "arn:partition:iam:region:account-id:resource-id", "resource_type": "Other", "risk": "Password policies are used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one non-alphanumeric character.", "service_name": "iam", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_password_policy_symbol", "passed": false, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_password_policy_uppercase", "check_title": "Ensure IAM password policy requires at least one uppercase letter", "check_type": [], "depends_on": [], "description": "Ensure IAM password policy requires at least one uppercase letter", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Ensure \"Requires at least one uppercase letter\" is checked under \"Password Policy.\"", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html"}}, "resource_id_template": "arn:partition:iam:region:account-id:resource-id", "resource_type": "Other", "risk": "Password policies are used to enforce password complexity requirements.  IAM password policies can be used to ensure passwords are comprised of different character sets.  It is recommended that the password policy require at least one uppercase letter.\n", "service_name": "iam", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_password_policy_uppercase", "passed": true, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": ["Identity and Access Management"], "check_aliases": [], "check_id": "iam_root_hardware_mfa_enabled", "check_title": "Ensure only hardware MFA is enabled for the root account", "check_type": [], "depends_on": [], "description": "AwsIamUser", "failure_message": null, "notes": "Identity and Access Management", "provider": "aws", "related_to": [], "related_url": "https://tevi.co", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Using IAM console navigate to Dashboard and expand Activate MFA on your root account.", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_mfa"}}, "resource_id_template": "arn:partition:service:region:account-id:resource-id", "resource_type": "AwsIamUser", "risk": "The root account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a user name and password. With MFA enabled when a user signs in to an AWS website they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. For Level 2 it is recommended that the root account be protected with only a hardware MFA.", "service_name": "iam", "severity": "high", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_root_hardware_mfa_enabled", "passed": false, "report_metadata": null, "resource_ids_status": {"root": false}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "iam_root_mfa_enabled", "check_title": "Ensure MFA is enabled for the root account", "check_type": [], "depends_on": [], "description": "Ensure MFA is enabled for the root account", "failure_message": null, "notes": "", "provider": "aws", "related_to": [], "related_url": "", "remediation": {"code": {"cli": "", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Using IAM console navigate to Dashboard and expand Activate MFA on your root account.", "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_mfa"}}, "resource_id_template": "arn:partition:iam:region:account-id:resource-id", "resource_type": "AwsIamUser", "risk": "The root account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a user name and password. With MFA enabled when a user signs in to an AWS website they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. When virtual MFA is used for root accounts it is recommended that the device used is NOT a personal device but rather a dedicated mobile device (tablet or phone) that is managed to be kept charged and secured independent of any individual personal devices. (non-personal virtual MFA) This lessens the risks of losing access to the MFA due to device loss / trade-in or if the individual owning the device is no longer employed at the company.\n", "service_name": "iam", "severity": "critical", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.iam.iam_root_mfa_enabled", "passed": false, "report_metadata": null, "resource_ids_status": {}, "section": "Security"}, {"check_metadata": {"categories": [], "check_aliases": [], "check_id": "organizations_account_part_of_organizations", "check_title": "Check if account is part of an AWS Organizations", "check_type": ["Logging and Monitoring"], "depends_on": [], "description": "Ensure that AWS Organizations service is currently in use. This check verifies if the AWS account is part of an AWS Organization, confirming centralized management.\n", "failure_message": null, "notes": "Infrastructure Protection", "provider": "aws", "related_to": [], "related_url": "https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_create.html", "remediation": {"code": {"cli": "aws organizations create-organization", "native_iac": "", "other": "", "terraform": ""}, "recommendation": {"text": "Create or Join an AWS Organization for effective account management.", "url": "https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_create.html"}}, "resource_id_template": "arn:partition:service::account-id:organization/organization-id", "resource_type": "Other", "risk": "The risk associated with not being part of an AWS Organizations is that it can lead to a lack of centralized management and control over the AWS accounts in an organization. This can make it difficult to enforce security policies consistently across all accounts and can also result in increased costs due to inefficiencies in resource usage. Additionally, not being part of an AWS Organizations can make it harder to track and manage account usage and access.", "service_name": "organizations", "severity": "medium", "sub_service_name": "", "success_message": null}, "created_on": "2024-11-09T10:45:57.578045", "dimensions": [], "framework": "AWS | Well Architected Review", "name": "library.aws.checks.organizations.organizations_account_part_of_organizations", "passed": false, "report_metadata": {"error": "An error occurred (AccessDeniedException) when calling the ListRoots operation: You don\u0027t have permissions to access this resource."}, "resource_ids_status": {}, "section": "Security"}];
var check_analytics = {"by_sections": [{"check_status": {"failed": 5, "passed": 7, "total": 12}, "name": "Reliability", "severity": {"critical": 7, "high": 0, "low": 1, "medium": 4}}, {"check_status": {"failed": 18, "passed": 13, "total": 31}, "name": "Security", "severity": {"critical": 4, "high": 7, "low": 0, "medium": 20}}], "by_services": [{"check_status": {"failed": 9, "passed": 6, "total": 15}, "name": "ec2", "severity": {"critical": 2, "high": 1, "low": 0, "medium": 12}}, {"check_status": {"failed": 1, "passed": 0, "total": 1}, "name": "organizations", "severity": {"critical": 0, "high": 0, "low": 0, "medium": 1}}, {"check_status": {"failed": 0, "passed": 1, "total": 1}, "name": "elb", "severity": {"critical": 0, "high": 0, "low": 0, "medium": 1}}, {"check_status": {"failed": 0, "passed": 1, "total": 1}, "name": "dynamodb", "severity": {"critical": 0, "high": 0, "low": 0, "medium": 1}}, {"check_status": {"failed": 0, "passed": 2, "total": 2}, "name": "opensearch", "severity": {"critical": 0, "high": 0, "low": 1, "medium": 1}}, {"check_status": {"failed": 11, "passed": 10, "total": 21}, "name": "iam", "severity": {"critical": 9, "high": 6, "low": 0, "medium": 6}}, {"check_status": {"failed": 1, "passed": 0, "total": 1}, "name": "account", "severity": {"critical": 0, "high": 0, "low": 0, "medium": 1}}, {"check_status": {"failed": 1, "passed": 0, "total": 1}, "name": "cloudformation", "severity": {"critical": 0, "high": 0, "low": 0, "medium": 1}}], "by_severities": [{"check_status": {"failed": 0, "passed": 1, "total": 1}, "name": "low", "severity": {"critical": 0, "high": 0, "low": 1, "medium": 0}}, {"check_status": {"failed": 14, "passed": 10, "total": 24}, "name": "medium", "severity": {"critical": 0, "high": 0, "low": 0, "medium": 24}}, {"check_status": {"failed": 8, "passed": 3, "total": 11}, "name": "critical", "severity": {"critical": 11, "high": 0, "low": 0, "medium": 0}}, {"check_status": {"failed": 1, "passed": 6, "total": 7}, "name": "high", "severity": {"critical": 0, "high": 7, "low": 0, "medium": 0}}], "check_status": {"failed": 23, "passed": 20, "total": 43}, "severity": {"critical": 11, "high": 14, "low": 1, "medium": 24}};