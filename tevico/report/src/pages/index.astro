---
import { ShieldAlert, ShieldCheck } from "lucide-react";

import MainLayout from "@/components/MainLayout.astro";
import { Chart, ChartProps } from "@/components/tevico/charts";
import { MetricCard } from "@/components/tevico/metric-card";
import { StatsWithChart, StatsProps } from "@/components/tevico/statsWithChart";
import { TableComponent } from "@/components/tevico/table";
import { pageNames, pages } from "@/lib/utils";
import { AnalyticsReport } from "@/components/tevico/types/analyticsTypes";
import { CheckReport, Severity } from "@/components/tevico/types/checkTypes";

import { getProgressProps, getPieChartProps } from "@/lib/reportUtils";

import CheckAnalytics from "@/data/check_analytics.json";
import CheckReports from "@/data/check_reports.json";

import "@/styles/globals.css";

const checkAnalytics = CheckAnalytics as AnalyticsReport;
const checkReport = CheckReports as unknown as CheckReport[];

const majorImpactService = checkAnalytics.by_services.sort(
  (a, b) => b.check_status.failed - a.check_status.failed,
)[0];
const areaOfFocus = checkAnalytics.by_sections.sort(
  (a, b) => b.check_status.failed - a.check_status.failed,
)[0];

const severityScore =
  checkReport.reduce((acc, check) => {
    const scores: { [key in Severity]: number } = {
      critical: 4,
      high: 3,
      medium: 2,
      low: 1,
    };
    return acc + scores[check.check_metadata.severity];
  }, 0) / checkReport.length;

const progressPropsForFailed: StatsProps = getProgressProps({
  reports: checkAnalytics.by_severities,
  checkStatus: "failed",
  statusBy: "severity",
});

const progressPropsForPassed: StatsProps = getProgressProps({
  reports: checkAnalytics.by_severities,
  checkStatus: "passed",
  statusBy: "severity",
});

const passedChecksByService: ChartProps = getPieChartProps({
  reports: checkAnalytics.by_services,
  checkStatus: "passed",
  statusBy: "service",
  isDonut: true,
});

const failedChecksByService: ChartProps = getPieChartProps({
  reports: checkAnalytics.by_services,
  checkStatus: "failed",
  statusBy: "service",
  isDonut: true,
});

const passedChecksBySection: ChartProps = getPieChartProps({
  reports: checkAnalytics.by_sections,
  checkStatus: "passed",
  statusBy: "section",
  isDonut: false,
});

const failedChecksBySection: ChartProps = getPieChartProps({
  reports: checkAnalytics.by_sections,
  checkStatus: "failed",
  statusBy: "section",
  isDonut: false,
});

// const passedChecksTableData = {
//   headers: 
// };

const tableData = {
  headers: [
    { key: "id", label: "ID" },
    { key: "amount", label: "Amount" },
    // { key: 'status', label: 'Status' },
    // { key: 'email', label: 'Email' },
  ],
  data: [
    {
      id: "728ed52f",
      amount: 100,
      status: "pending",
      email: "m@example.com",
    },
    {
      id: "489e1d42",
      amount: 125,
      status: "processing",
      email: "example@gmail.com",
    },
  ],
};

// const columns = [
//   {
//     accessorKey: "status",
//     header: "Status",
//   },
//   {
//     accessorKey: "email",
//     header: "Email",
//   },
//   {
//     accessorKey: "amount",
//     header: "Amount",
//   },
// ];
---

<MainLayout activePage={pages[pageNames.index]}>
  <div class="grid gap-4 md:grid-cols-2 md:gap-8 lg:grid-cols-4">
    <MetricCard
      title="Total Checks"
      value={checkAnalytics.check_status.total}
      content="Successfully executed"
    />
    <MetricCard
      title="Passed"
      value={checkAnalytics.check_status.passed}
      content={`out of ${checkAnalytics.check_status.total} i.e. ${(
        (checkAnalytics.check_status.passed /
          checkAnalytics.check_status.total) *
        100
      ).toFixed(2)}% checks passed`}
    />
    <MetricCard
      title="Failed"
      value={checkAnalytics.check_status.failed}
      content={`out of ${checkAnalytics.check_status.total} i.e ${(
        (checkAnalytics.check_status.failed /
          checkAnalytics.check_status.total) *
        100
      ).toFixed(2)}% checks failed`}
    />
    <MetricCard
      title="Severity Score"
      value={`${((severityScore / 4) * 100).toFixed(2)}%`}
      content="Lower the better!"
    />
    <MetricCard
      title="Critical Checks Failed"
      value={checkAnalytics.by_severities
        .reduce(
          (acc, severity) =>
            severity.name === "critical" ? severity.check_status.failed : acc,
          0,
        )
        .toString()}
      content={`out of ${checkAnalytics.check_status.failed} total failed i.e ${(
        (checkAnalytics.by_severities.reduce(
          (acc, severity) =>
            severity.name === "critical" ? severity.check_status.failed : acc,
          0,
        ) /
          checkAnalytics.check_status.failed) *
        100
      ).toFixed(2)}%`}
    />
    <MetricCard
      title="Major Impact On"
      value={majorImpactService.name.toUpperCase()}
      content={"with " +
        majorImpactService.check_status.failed +
        " failed checks"}
    />
    <MetricCard
      title="Area of Focus"
      value={`Infra ${areaOfFocus.name
        .split(" ")
        .map(
          (word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(),
        )
        .join(" ")}`}
      content={"with " + areaOfFocus.check_status.failed + " failed checks"}
    />

    <MetricCard title="Most Impacted CSP" value={"AWS"} />
  </div>

  <div class="inline-flex">
    <h1 class="text-lg font-semibold md:text-2xl">
      Checks that Passed
    </h1><ShieldCheck className="m-1" />
  </div>
  <div class="grid gap-4 md:grid-cols-2 md:gap-8 lg:grid-cols-2">
    <StatsWithChart {...progressPropsForPassed} />
    <Chart {...passedChecksByService} />
    <Chart {...passedChecksBySection} />
    <TableComponent
      tableData={tableData}
      tableHeading="Transaction"
      tableDescription="Recent transactions from your store."
      cardType="Success"
    />
  </div>

  <div class="inline-flex">
    <h1 class="text-lg font-semibold md:text-2xl">
      Checks that Failed
    </h1><ShieldAlert className="m-1" />
  </div>
  <div class="grid gap-4 md:grid-cols-2 md:gap-8 lg:grid-cols-2">
    <StatsWithChart {...progressPropsForFailed} />
    <Chart {...failedChecksByService} />
    <Chart {...failedChecksBySection} />
    <TableComponent
      tableData={tableData}
      tableHeading="Transaction"
      tableDescription="Recent transactions from your store."
      cardType="Error"
    />
  </div>
</MainLayout>
